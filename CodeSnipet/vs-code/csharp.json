{
	"Property and backing field": {
		"prefix": "propreact",
		"body": [
			"private ${1:int} ${2:attribute};",
			"public ${1:int} ${3:Attribute}",
			"{",
			"\tget { return ${2:attibute}; }",
			"\tset",
			"\t{",
			"\t\tthis.RaiseAndSetIfChanged(ref ${2:attribute}, value);",
			"\t}",
			"}"
		],
		"description": "Generate reactui getter/setter for class attributes"
	},
	"Avalonia Attached Property":{
		"prefix": "avalattprop",
		"body": [
			"/// <summary>",
			"/// Defines the ${1:property} attach property.",
			"/// </summary>",
			"public static readonly AttachedProperty<${4:type}> ${1:property}Property = ",
			"AvaloniaProperty.RegisterAttached<${2:ownerclass}, ${3:control}, ${4:type}>(""${1:property}"");",
			"",
			"/// <summary>",
			"/// Gets the attach property ${1:property}.",
			"/// </summary>",
			"public static ${4:type} Get${1:property}(${3:control} element)",
			"{",
			"return element.GetValue(${1:property}Property);",
			"}",
			"",
			"/// <summary>",
			"/// Sets the attach property ${1:property}.",
			"/// </summary>",
			"",
			"public static void Set${1:property}(${3:control} element, ${4:type} value)",
			"{",
			"element.SetValue(${1:property}Property, value);",
			"}"
		],
		"description": "Snippet for creating an attachedproperty"
	},
	"Avalonia Direct Property":{
		"prefix": "avaldirprop",
		"body": [
			"/// <summary>",
			"/// Defines the ${1:property} direct property.",
			"/// </summary>",
			"public static readonly DirectProperty<${2:ownerclass}, ${3:type}> ${1:property}Property =",
			"AvaloniaProperty.RegisterDirect<${2:ownerclass}, ${3:type}>(",
			"nameof(${1:property}),",
			"o => o.${1:property});",
			"",
			"private ${3:type} _${1:property};",
			"",
			"/// <summary>",
			"/// Gets or sets ${1:property}.",
			"/// </summary>",
			"public ${3:type} ${1:property}",
			"{",
			"get { return _${1:property}; }",
			"set",
			"{",
			"SetAndRaise(${1:property}Property, ref _${1:property}, value); ",
			"}",
			"}",
		],
		"description": "Snippet for creating an Avalonia Direct Property"
	},
	"Avalonia Routed Event":{
		"prefix": "avalevent",
		"body": [
		"/// <summary>",
		"/// Defines the ${1:property} routed event.",
		"/// </summary>",
		"public static readonly RoutedEvent<RoutedEventArgs> ${1:property}Event =",
		"RoutedEvent.Register<${2:ownerclass}, RoutedEventArgs>(nameof(${1:property}Event), RoutingStrategies.Bubble);",
		"",
		"/// <summary>",
		"/// Gets or sets ${1:property} eventhandler.",
		"/// </summary>",
        "public event EventHandler ${1:property}",    
		"{",
		"add",
		"{",
		"AddHandler(${1:property}Event, value);",
		"}",
		"remove",
		"{",
		"RemoveHandler(${1:property}Event, value);",
		"}",
		"}",
		
		],
		"description": "Snippet for creating an Avalonia Routed Event"
	},
	"Avalonia StyledProperty": {
		"prefix": "avalstprop",
		"body": [
		"/// <summary>",
		"/// Gets or sets ${1:property}.",
		"/// </summary>",
		"public ${2:type} ${1:property}",
		"{",
		"get { return (${2:type})GetValue(${1:property}Property); }",
		"set { SetValue(${1:property}Property, value); }",
		"}",
		"",
		"/// <summary>",
		"/// Defines the ${1:property} property.",
		"/// </summary>",
		"public static readonly StyledProperty<${2:type}> ${1:property}Property = ",
		"AvaloniaProperty.Register<${3:ownerclass}, ${2:type}>(nameof(${1:property}));",
		],
		"description": "Snippet for creating an Avalonia Styled Property"
	}
}
